/*
 * alertmanager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationSchema {
    /// Notification Client UUID
    #[serde(rename = "client_uuid")]
    pub client_uuid: String,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// List of notification events
    #[serde(rename = "events", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub events: Option<Option<Vec<String>>>,
    #[serde(rename = "first_event", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_event: Option<Option<String>>,
    /// Id
    #[serde(rename = "id")]
    pub id: String,
    /// Quantity notification retries
    #[serde(rename = "retries", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub retries: Option<Option<i32>>,
    /// Notification status
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl NotificationSchema {
    pub fn new(client_uuid: String, id: String, status: Status) -> NotificationSchema {
        NotificationSchema {
            client_uuid,
            created_at: None,
            events: None,
            first_event: None,
            id,
            retries: None,
            status,
            updated_at: None,
        }
    }
}

/// Notification status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "Processing")]
    Processing,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Success")]
    Success,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}

